/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { RigidBody } from '@react-three/rapier'
import { useFrame, useThree } from '@react-three/fiber';
import { useDayNight } from '../../contexts/DayNightContext';
import * as THREE from 'three';

const MAX_LIGHT_DISTANCE = 50;

export function OldRoom(props) {
  const { nodes, materials } = useGLTF('/elements/OldRoom.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 3 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });

  return (
    <group {...props} dispose={null} position={[0, .55, 0]}>
      <pointLight
        ref={lightRef}
        position={[0, .25, 0]}
        color="yellow"
        intensity={0}
        distance={8}
        decay={2}
      />
      <RigidBody type='fixed' colliders="trimesh">
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh'].geometry}
          material={materials.mat21}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_1'].geometry}
          material={materials.mat22}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_2'].geometry}
          material={materials.mat16}
        />


        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_3'].geometry}
          material={materials.mat18}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_4'].geometry}
          material={materials.mat15}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_5'].geometry}
          material={materials.mat17}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_6'].geometry}
          material={materials.mat19}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_7'].geometry}
          material={materials.mat20}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_8'].geometry}
          material={materials.mat3}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_9'].geometry}
          material={materials.mat23}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_10'].geometry}
          material={materials.mat24}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_11'].geometry}
          material={materials.mat8}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_12'].geometry}
          material={materials.mat12}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_13'].geometry}
          material={materials.mat25}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_14'].geometry}
          material={materials.mat9}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_15'].geometry}
          material={materials.mat14}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_16'].geometry}
          material={materials.mat7}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Node-Mesh_17'].geometry}
          material={materials.mat5}
        />
      </RigidBody>
    </group>
  )
}

useGLTF.preload('/elements/OldRoom.glb')
