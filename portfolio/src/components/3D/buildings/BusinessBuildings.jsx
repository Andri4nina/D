/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: assetfactory (https://sketchfab.com/assetfactory)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/low-poly-business-buildings-pack-2838e30360ce4b0cb2cc416dca213111
Title: Low poly business buildings pack
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { RigidBody } from '@react-three/rapier'
import { useFrame } from '@react-three/fiber'
import { useThree } from '@react-three/fiber'
import { useDayNight } from '../../../contexts/DayNightContext'
import * as THREE from 'three';


const MAX_LIGHT_DISTANCE = 50;

export function Restaurant(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_business_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="white"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.RestaurantBuilding_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Restaurant_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}

export function Shop(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_business_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="white"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Shop_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.ShopBuilding_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}

export function Pizza(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_business_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="cyan"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PizzaBuilding_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PizzaTables_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PizzaLight_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PizzaBoard_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Pizza_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}

export function Coffee(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_business_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="white"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.CafeBuilding_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Cafe_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}

export function Cinema(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_business_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="cyan"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Cinema_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cinema_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}

export function Burger(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_business_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="cyan"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Burger_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.BurgerBuilding_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}


export function Market(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_business_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="cyan"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.ShoppingCenterBuilding_Texture_buildings1_0.geometry}
            material={materials.Texture_buildings1}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_ShoppingCenter_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}






useGLTF.preload('/elements/low_poly_business_buildings_pack.glb')