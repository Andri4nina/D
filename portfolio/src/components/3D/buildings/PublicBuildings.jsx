/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: assetfactory (https://sketchfab.com/assetfactory)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com3D-models/low-poly-public-buildings-pack-b51a75af7f4e41579ec16e28ee96b676
Title: Low poly public buildings pack
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { useDayNight } from '../../../contexts/DayNightContext'
import * as THREE from 'three';
import { RigidBody } from '@react-three/rapier';
const MAX_LIGHT_DISTANCE = 50;


export function Hopital(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_public_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="cyan"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PublicBuilding_Hospital_TextureBuildingsPack2_0.geometry}
            material={materials.TextureBuildingsPack2}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Hospital_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>

    </group>
  )
}

export function School(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_public_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="white"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_School_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PublicBuilding_School_TextureBuildingsPack2_0.geometry}
            material={materials.TextureBuildingsPack2}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}

export function Police(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_public_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="white"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Police_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PublicBuilding_Police_TextureBuildingsPack2_0.geometry}
            material={materials.TextureBuildingsPack2}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}


export function GasStation(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_public_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="white"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_GasStation_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PublicBuilding_GasStation_TextureBuildingsPack2_0.geometry}
            material={materials.TextureBuildingsPack2}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}


export function Pharmacy(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_public_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 5, 0]}
        color="springgreen"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PublicBuilding_Pharmacy_TextureBuildingsPack2_0.geometry}
            material={materials.TextureBuildingsPack2}
            position={[0, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Collider_Pharnacy_Collider_0.geometry}
            material={materials.Collider}
            position={[0, 0, 0]}
            scale={100}
          />

          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PublicBuilding_Light_TextureBuildingsPack2_0.geometry}
            material={materials.TextureBuildingsPack2}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}

export function Capitol(props) {
  const { nodes, materials } = useGLTF('/elements/low_poly_public_buildings_pack.glb')
  const { isNight } = useDayNight();
  const lightRef = useRef();
  const { camera } = useThree();

  useFrame(() => {
    if (!lightRef.current) return;

    const lanternPos = lightRef.current.getWorldPosition(new THREE.Vector3());
    const distance = lanternPos.distanceTo(camera.position);

    const shouldLight = isNight && distance < MAX_LIGHT_DISTANCE;
    const targetIntensity = shouldLight ? 30 : 0;

    lightRef.current.intensity = THREE.MathUtils.lerp(
      lightRef.current.intensity,
      targetIntensity,
      0.1 // Vitesse de fade
    );
  });
  return (
    <group {...props} dispose={null}>
      <pointLight
        ref={lightRef}
        position={[0, 10, 0]}
        color="white"
        intensity={0}
        distance={50}
        decay={2}
      />
      <RigidBody colliders="trimesh" type='fixed'>
        <group scale={0.015}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PublicBuilding_Bin_TextureBuildingsPack2_0.geometry}
            material={materials.TextureBuildingsPack2}
            position={[0, 0, 0]}
            scale={100}
          />

          <mesh
            castShadow
            receiveShadow
            geometry={nodes.PublicBuilding_CityHall_TextureBuildingsPack2_0.geometry}
            material={materials.TextureBuildingsPack2}
            position={[0, 0, 0]}
            scale={100}
          />
        </group>
      </RigidBody>
    </group>
  )
}




useGLTF.preload('/elements/low_poly_public_buildings_pack.glb')